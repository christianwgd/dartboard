# This file is a template, and might need editing before it works on your project.
# This example is for testing Django with MySQL.
#
# The test CI/CD variables MYSQL_DB, MYSQL_USER and MYSQL_PASS can be set in the project settings at:
#     Settings --> CI/CD --> Variables
#
# The Django settings in settings.py, used in tests, might look similar to:
#
#  DATABASES = {
#      'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ.get('MYSQL_DATABASE'),
#        	'USER':  os.environ.get('MYSQL_USER'),
#        	'PASSWORD': os.environ.get('MYSQL_PASSWORD'),
#       	'HOST': 'mysql',
#     	  'PORT': '3306',
#         'CONN_MAX_AGE':60,
#      },
#  }
#
# It is possible to use '--settings' to specify a custom settings file on the command line below or use an environment
# variable to trigger an include on the bottom of your settings.py:
#   if os.environ.get('DJANGO_CONFIG')=='test':
#       from .settings_test import *
#
# It is also possible to hardcode the database name and credentials in the settings.py file and in the .gitlab-ci.yml file.
#

variables:
  # DJANGO_CONFIG: "test"
  DEBIAN__FRONTEND: "noninteractive"
  TZ: "Europe/Berlin"

default:
  image: ubuntu:22.04
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  #  services:
  #    - postgres:14.0
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/
  before_script:
    - apt -y update
    - apt -y install apt-utils
    - apt -y install net-tools python3.8 python3-pip python3-dev tzdata
    - apt -y upgrade
    - pip3 install -r requirements.txt
    - pip3 install -r test-requirements.txt


migrations:
  stage: build
  script:
    - python3 manage.py makemigrations
    - python3 manage.py migrate
    - python3 manage.py check

python-codecheck:
  stage: codecheck
  script:
    - find . -type f -name "*.py" | xargs pylint

django-tests:
  stage: test
  script:
    # use python3 explicitly. see https://wiki.ubuntu.com/Python/3
    - python3 manage.py test

deploy:
  stage: deploy
  script: echo "Define your deployment script!"
  environment: production
